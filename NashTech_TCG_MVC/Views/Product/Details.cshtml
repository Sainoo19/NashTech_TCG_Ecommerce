@model NashTech_TCG_ShareViewModels.ViewModels.ProductViewModel

@{
    ViewData["Title"] = Model.Name;
    var formatPrice = ViewBag.FormatPrice as Func<decimal, string> ?? (price => price.ToString("N0"));
}

<!-- Toast container for notifications -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    @TempData["SuccessMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="toast align-items-center text-white bg-danger border-0 show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @TempData["ErrorMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }
</div>

<!-- Breadcrumb navigation -->
<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Product")">Products</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Product", new { categoryId = Model.CategoryId })">@Model.CategoryName</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>
</div>

<!-- Main product section -->
<div class="container mt-3">
    <div class="card border-0 shadow-sm rounded-4 overflow-hidden mb-5">
        <div class="row g-0">
            <!-- Product Image Section -->
            <div class="col-lg-6 bg-light position-relative">
                
                <div class="position-absolute top-0 end-0 m-3">
                    <span class="badge bg-primary p-2 rounded-pill">
                        <i class="bi bi-award-fill me-1"></i>TCG Exclusive
                    </span>
                </div>

                <div class="d-flex align-items-center justify-content-center h-100 p-4">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" class="img-fluid" style="max-height: 400px; cursor: pointer;"
                             alt="@Model.Name" data-bs-toggle="modal" data-bs-target="#imageModal">
                    }
                    else
                    {
                        <img src="/images/placeholder.png" class="img-fluid" style="max-height: 400px; cursor: pointer;"
                             alt="@Model.Name" data-bs-toggle="modal" data-bs-target="#imageModal">
                    }
                </div>
            </div>


            <!-- Product Info Section -->
            <div class="col-lg-6">
                <div class="p-4 p-lg-5">
                    <div class="d-flex justify-content-between align-items-start">
                        <h1 class="fw-bold mb-2">@Model.Name</h1>
                        <button class="btn btn-outline-danger btn-sm rounded-circle" title="Add to wishlist">
                            <i class="bi bi-heart"></i>
                        </button>
                    </div>

                    <div class="d-flex align-items-center mb-3">
                        <span class="badge bg-light text-dark me-2">
                            <i class="bi bi-tag-fill me-1"></i>@Model.CategoryName
                        </span>
                        <span class="badge bg-light text-dark">
                            <i class="bi bi-calendar-event me-1"></i>Added @Model.CreatedDate.ToString("MMM dd, yyyy")
                        </span>
                    </div>

                    <div class="mb-4">
                        <div class="d-flex align-items-center">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(Model.AverageRating))
                                {
                                    <i class="bi bi-star-fill text-warning"></i>
                                }
                                else if (i - 0.5 <= Model.AverageRating)
                                {
                                    <i class="bi bi-star-half text-warning"></i>
                                }
                                else
                                {
                                    <i class="bi bi-star text-warning"></i>
                                }
                            }
                            <a href="#reviews" class="ms-2 text-decoration-none">
                                @Model.AverageRating.ToString("0.0") (@Model.RatingCount @(Model.RatingCount == 1 ? "review" : "reviews"))
                            </a>
                        </div>
                    </div>

                    <div class="p-3 rounded-3 bg-light mb-4">
                        <h3 id="priceDisplay" class="fw-bold text-primary mb-0">@Model.PriceRange.Replace("$", "").Replace(".", ",").Replace(",", ".")</h3>
                    </div>

                    @if (Model.Variants.Any())
                    {
                        <div class="mb-4">
                            <label for="variantSelect" class="form-label fw-bold">
                                <i class="bi bi-diamond me-2"></i>Select Rarity:
                            </label>
                            <select class="form-select form-select-lg mb-3" id="variantSelect">
                                <option value="">Choose a rarity option</option>
                                @foreach (var variant in Model.Variants.OrderBy(v => v.Price))
                                {
                                    <option value="@variant.VariantId"
                                            data-price="@variant.Price.ToString("0.00")"
                                            data-stock="@variant.StockQuantity">
                                        @variant.RarityName - @formatPrice(variant.Price)
                                        @if (variant.StockQuantity > 10)
                                        {
                                            <text>(Many in stock)</text>
                                        }
                                        else if (variant.StockQuantity > 0)
                                        {
                                            <text>(Only @variant.StockQuantity left!)</text>
                                        }
                                        else
                                        {
                                            <text>(Out of stock)</text>
                                        }
                                    </option>
                                }
                            </select>

                            <div id="stockInfo" class="mb-4 d-none">
                                <div class="d-flex align-items-center">
                                    <span id="stockDisplay" class="badge rounded-pill bg-success me-2">
                                        <i class="bi bi-check-circle me-1"></i>In Stock
                                    </span>
                                    <div class="progress flex-grow-1" style="height: 8px;">
                                        <div class="progress-bar bg-success" id="stockMeter" role="progressbar" style="width: 100%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="quantity" class="form-label fw-bold">
                                <i class="bi bi-123 me-2"></i>Quantity:
                            </label>
                            <div class="input-group" style="max-width: 180px;">
                                <button class="btn btn-outline-secondary d-flex align-items-center justify-content-center"
                                        style="width: 40px;" type="button" id="decreaseQty">
                                    <i class="bi bi-dash"></i>
                                </button>
                                <input type="number" class="form-control text-center" id="quantity" min="1" max="10" value="1">
                                <button class="btn btn-outline-secondary d-flex align-items-center justify-content-center"
                                        style="width: 40px;" type="button" id="increaseQty">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="button" id="addToCartBtn" class="btn btn-primary btn-lg">
                                <i class="bi bi-cart-plus me-2"></i>Add to Cart
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-lg">
                                <i class="bi bi-lightning-fill me-2"></i>Buy Now
                            </button>
                        </div>

                        <div class="mt-4">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-truck text-success me-2 fs-5"></i>
                                <span>Free shipping on orders over 150.000đ</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-shield-check text-success me-2 fs-5"></i>
                                <span>Secure payments</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning d-flex align-items-center">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <div>This product is currently unavailable.</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Product Information Tabs -->
    <div class="mb-5">
        <ul class="nav nav-tabs border-0" id="productInfoTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active fw-bold" id="description-tab" data-bs-toggle="tab"
                        data-bs-target="#description-tab-pane" type="button" role="tab" aria-selected="true">
                    <i class="bi bi-file-text me-2"></i>Description
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="details-tab" data-bs-toggle="tab"
                        data-bs-target="#details-tab-pane" type="button" role="tab" aria-selected="false">
                    <i class="bi bi-info-circle me-2"></i>Details
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="reviews-tab" data-bs-toggle="tab"
                        data-bs-target="#reviews-tab-pane" type="button" role="tab" aria-selected="false">
                    <i class="bi bi-star me-2"></i>Reviews
                    <span class="badge bg-primary ms-1">@Model.RatingCount</span>
                </button>
            </li>
        </ul>
        <div class="tab-content bg-white p-4 shadow-sm" id="productInfoTabsContent">
            <!-- Description Tab -->
            <div class="tab-pane fade show active" id="description-tab-pane" role="tabpanel" tabindex="0">
                @await Html.PartialAsync("_DescriptionTab", Model)
            </div>

            <!-- Details Tab -->
            <div class="tab-pane fade" id="details-tab-pane" role="tabpanel" tabindex="0">
                @await Html.PartialAsync("_DetailsTab", Model)
            </div>

            <!-- Reviews Tab -->
            <div class="tab-pane fade" id="reviews-tab-pane" role="tabpanel" tabindex="0">
                @await Html.PartialAsync("_ReviewsTab", Model)
            </div>
        </div>
    </div>

    <!-- Related Products Section -->
    <section class="mb-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold">Related Products</h3>
            <a href="@Url.Action("Index", "Product", new { categoryId = Model.CategoryId })" class="btn btn-outline-primary">
                View All <i class="bi bi-arrow-right ms-1"></i>
            </a>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
            <!-- Placeholder related products - would be populated from controller -->
            @for (int i = 1; i <= 4; i++)
            {
                <div class="col">
                    <div class="card h-100 border-0 shadow-sm">
                        @if (i == 1)
                        {
                            <div class="position-relative">
                                <img src="/images/placeholder.png" class="card-img-top" style="height: 180px; object-fit: contain; padding: 1rem;" alt="Related Product">
                                <div class="position-absolute top-0 end-0 m-2">
                                    <span class="badge bg-danger">New</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <img src="/images/placeholder.png" class="card-img-top" style="height: 180px; object-fit: contain; padding: 1rem;" alt="Related Product">
                        }
                        <div class="card-body">
                            <h5 class="card-title text-truncate">Related Product @i</h5>
                            <p class="card-text text-truncate">Same category</p>
                            <p class="card-text fw-bold text-primary">@(15 + i * 5).999đ</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content border-0 bg-transparent shadow-none">
            <div class="modal-header border-0 p-0">
                <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-3" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0 d-flex justify-content-center align-items-center">
                <img src="@(string.IsNullOrEmpty(Model.ImageUrl) ? "/images/placeholder.png" : Model.ImageUrl)"
                     class="img-fluid" style="max-height: 80vh;" alt="@Model.Name">
            </div>
        </div>
    </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-light">
                <h5 class="modal-title fw-bold" id="reviewModalLabel">
                    <i class="bi bi-pencil-square me-2"></i>Write a Review
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <input type="hidden" id="productId" value="@Model.ProductId">

                    <div class="mb-4 text-center">
                        <label class="form-label fw-bold d-block mb-3">Your Rating</label>
                        <div class="rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi bi-star fs-2 mx-1 rating-star text-black-50" data-rating="@i" style="cursor: pointer;"></i>
                            }
                            <input type="hidden" id="ratingValue" name="Rating" value="0">
                        </div>
                        <div class="mt-2 fw-bold text-primary" id="ratingText"></div>
                    </div>

                    <div class="mb-3">
                        <label for="comment" class="form-label fw-bold">
                            <i class="bi bi-chat-text me-2"></i>Your Review
                        </label>
                        <textarea class="form-control" id="comment" name="Comment" rows="4"
                                  placeholder="Share your experience with this product..."></textarea>
                        <div class="form-text">Your review helps other shoppers make better decisions.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitReview">
                    <i class="bi bi-send me-2"></i>Submit Review
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize toasts and tooltips
            var toastElements = document.querySelectorAll('.toast');
            toastElements.forEach(function (toastEl) {
                new bootstrap.Toast(toastEl).show();
            });

            var tooltipTriggerList = document.querySelectorAll('[title]');
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Initialize review modal
            var reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));

            // Format price in Vietnamese style
            function formatPrice(price) {
                return parseInt(price).toLocaleString('en-US').replace(/,/g, '.') + 'đ';
            }

            // Handle variant selection
            $("#variantSelect").change(function() {
                const option = $(this).find("option:selected");
                const variantId = $(this).val();

                if (variantId) {
                    // Update price display
                    const price = option.data("price");
                    $("#priceDisplay").text(formatPrice(price));

                    // Update stock display
                    const stock = option.data("stock");
                    $("#stockInfo").removeClass("d-none");

                    if (stock > 0) {
                        const stockPct = Math.min(stock * 10, 100);
                        const lowStock = stock <= 5;

                        $("#stockDisplay")
                            .removeClass("bg-danger bg-warning bg-success")
                            .addClass(lowStock ? "bg-warning" : "bg-success")
                            .html(lowStock ?
                                `<i class="bi bi-exclamation-circle me-1"></i>Low Stock (${stock})` :
                                `<i class="bi bi-check-circle me-1"></i>In Stock (${stock})`);

                        $("#stockMeter")
                            .removeClass("bg-danger bg-warning bg-success")
                            .addClass(lowStock ? "bg-warning" : "bg-success")
                            .css("width", `${stockPct}%`);

                        // Update quantity control
                        $("#quantity").attr("max", stock);
                        if (parseInt($("#quantity").val()) > stock) {
                            $("#quantity").val(stock);
                        }

                        $("#addToCartBtn").prop("disabled", false);
                    } else {
                        $("#stockDisplay")
                            .removeClass("bg-success bg-warning")
                            .addClass("bg-danger")
                            .html('<i class="bi bi-x-circle me-1"></i>Out of Stock');

                        $("#stockMeter")
                            .removeClass("bg-success bg-warning")
                            .addClass("bg-danger")
                            .css("width", "100%");

                        $("#addToCartBtn").prop("disabled", true);
                    }
                } else {
                    // Reset price and hide stock info
                    $("#priceDisplay").text("@Model.PriceRange.Replace("$", "").Replace(".", ",").Replace(",", ".")đ");
                    $("#stockInfo").addClass("d-none");
                }
            });

            // Quantity controls
            $("#decreaseQty").click(function() {
                var qty = parseInt($("#quantity").val());
                if (qty > 1) $("#quantity").val(qty - 1);
            });

            $("#increaseQty").click(function() {
                var qty = parseInt($("#quantity").val());
                var max = parseInt($("#quantity").attr("max") || 10);
                if (qty < max) $("#quantity").val(qty + 1);
            });

            // Validate quantity input
            $("#quantity").change(function() {
                var qty = parseInt($(this).val());
                var min = parseInt($(this).attr("min") || 1);
                var max = parseInt($(this).attr("max") || 10);

                if (isNaN(qty) || qty < min) $(this).val(min);
                else if (qty > max) $(this).val(max);
            });

            // Rating star interaction
            $(".rating-star").hover(
                function() {
                    const rating = $(this).data("rating");
                    highlightStars(rating);
                },
                function() {
                    const rating = parseInt($("#ratingValue").val());
                    highlightStars(rating);
                }
            );

            $(".rating-star").click(function() {
                const rating = $(this).data("rating");
                $("#ratingValue").val(rating);
                highlightStars(rating);

                // Show text rating
                const texts = ["", "Poor", "Fair", "Good", "Very Good", "Excellent"];
                $("#ratingText").text(texts[rating]);
            });

            function highlightStars(rating) {
                $(".rating-star").each(function(index) {
                    const starRating = $(this).data("rating");
                    $(this).removeClass("bi-star-fill bi-star text-warning text-black-50")
                        .addClass(starRating <= rating ? "bi-star-fill text-warning" : "bi-star text-black-50");
                });
            }

            // Review modal controls
            $("#writeReviewBtn, #firstReviewBtn").click(function() {
                // Reset form
                $("#ratingValue").val(0);
                highlightStars(0);
                $("#ratingText").text("");
                $("#comment").val("");

                reviewModal.show();
            });

            // Submit review
            $("#submitReview").click(function() {
                const rating = $("#ratingValue").val();
                const comment = $("#comment").val();
                const productId = $("#productId").val();

                if (rating < 1) {
                    alert("Please select a rating.");
                    return;
                }

                // Show loading state
                const btn = $(this);
                const originalText = btn.html();
                btn.prop('disabled', true)
                   .html('<span class="spinner-border spinner-border-sm me-2"></span>Submitting...');

                // Submit the review via AJAX
                $.ajax({
                    url: '@Url.Action("AddRating", "Product")',
                    type: 'POST',
                    data: {
                        ProductId: productId,
                        Rating: rating,
                        Comment: comment
                    },
                    success: function(result) {
                        if (result.success) {
                            // Refresh the page to show updated ratings
                            location.reload();
                        } else {
                            alert(result.message || "Failed to submit review.");
                            btn.html(originalText).prop('disabled', false);
                            reviewModal.hide();
                        }
                    },
                    error: function(xhr) {
                        if (xhr.status === 401) {
                            alert("You must be logged in to submit a review.");
                            window.location = '@Url.Action("Login", "Auth", new { returnUrl = Url.Action("Details", "Product", new { id = Model.ProductId }) })';
                        } else {
                            alert("An error occurred while submitting your review.");
                            btn.html(originalText).prop('disabled', false);
                        }
                    }
                });
            });

            // Add to cart
            $("#addToCartBtn").click(function() {
                const variantId = $("#variantSelect").val();
                const quantity = parseInt($("#quantity").val());
                const productId = "@Model.ProductId";

                if (!variantId) {
                    alert("Please select a rarity option");
                    return;
                }

                // Show loading state
                const btn = $(this);
                const originalText = btn.html();
                btn.prop('disabled', true)
                   .html('<span class="spinner-border spinner-border-sm me-2"></span>Adding...');

                // Add to cart via AJAX
                $.ajax({
                    url: '@Url.Action("AddToCart", "ShoppingCart")',
                    type: 'POST',
                    data: { VariantId: variantId, Quantity: quantity, ProductId: productId },
                    success: function(result) {
                        if (result.success) {
                            // Show success toast
                            const toast = `
                                <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive">
                                    <div class="d-flex">
                                        <div class="toast-body">
                                            <i class="bi bi-check-circle me-2"></i>Item added to cart successfully!
                                        </div>
                                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                                    </div>
                                </div>`;

                            $('.toast-container').append(toast);
                            new bootstrap.Toast($('.toast:last')).show();

                            // Update cart count (assuming there's a function for this)
                            $.ajax({
                                url: '@Url.Action("GetCartCount", "ShoppingCart")',
                                type: 'GET',
                                success: function(cartResult) {
                                    if (cartResult.success) {
                                        $('#cart-count').text(cartResult.count).show();
                                    }
                                }
                            });
                        } else {
                            alert(result.message || 'Failed to add item to cart.');
                        }

                        btn.html(originalText).prop('disabled', false);
                    },
                    error: function(xhr) {
                        if (xhr.status === 401) {
                            alert("You must be logged in to add items to cart.");
                            window.location = '@Url.Action("Login", "Auth", new { returnUrl = Url.Action("Details", "Product", new { id = Model.ProductId }) })';
                        } else {
                            alert('An error occurred while adding the item to cart.');
                        }

                        btn.html(originalText).prop('disabled', false);
                    }
                });
            });

            // Filter reviews
            $("[data-filter]").click(function() {
                const filter = $(this).data("filter");

                $("[data-filter]").removeClass("active");
                $(this).addClass("active");

                if (filter === "all") {
                    $(".review-item").fadeIn();
                } else {
                    $(".review-item").hide();
                    $(`.review-item[data-rating="${filter}"]`).fadeIn();
                }
            });

            // Auto-show tab based on URL hash
            const hash = window.location.hash;
            if (hash) {
                const tab = $(`a[href="${hash}"], button[data-bs-target="${hash}-pane"]`);
                if (tab.length) {
                    new bootstrap.Tab(tab[0]).show();
                }
            }
        });
    </script>
}
