@model NashTech_TCG_ShareViewModels.ViewModels.PagedProductViewModel

<!-- Enhanced product grid with better Bootstrap classes -->
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-4">
    @foreach (var product in Model.Products)
    {
        <div class="col">
            <div class="card h-100 shadow-sm border-0 product-card">
                <div class="position-relative overflow-hidden">
                    <a href="@Url.Action("Details", "Product", new { id = product.ProductId })" class="text-decoration-none">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" class="card-img-top product-image" alt="@product.Name">
                        }
                        else
                        {
                            <img src="/images/placeholder.png" class="card-img-top product-image" alt="@product.Name">
                        }
                        <div class="overlay-actions position-absolute w-100 bottom-0 start-0 p-3 text-center">
                            <button class="btn btn-sm btn-primary">View Details</button>
                        </div>
                    </a>
                </div>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-truncate fw-bold">@product.Name</h5>
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-light text-dark me-2"><i class="bi bi-tag-fill me-1"></i>@product.CategoryName</span>
                    </div>
                    <div class="mt-auto">
                        <p class="card-text fw-bold text-primary fs-5">@product.PriceRange</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Products.Any())
{
    <div class="alert alert-info d-flex align-items-center mt-3" role="alert">
        <i class="bi bi-info-circle-fill flex-shrink-0 me-2"></i>
        <div>
            No products found matching your criteria. Please try a different search.
        </div>
    </div>
}

<!-- Enhanced pagination with better styling -->
@if (Model.TotalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination pagination-lg justify-content-center flex-wrap gap-1">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link rounded-pill shadow-sm" href="@Url.Action("Index", new {
                    pageNumber = Model.CurrentPage - 1,
                    pageSize = Model.PageSize,
                    categoryId = Model.CategoryId,
                    searchTerm = Model.SearchTerm,
                    sortBy = Model.SortBy,
                    ascending = Model.Ascending
                })" aria-label="Previous">
                    <i class="bi bi-chevron-left"></i>
                </a>
            </li>

            @{
                const int maxVisiblePages = 5;
                var startPage = Math.Max(1, Model.CurrentPage - (maxVisiblePages / 2));
                var endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

                // Adjust start page if we're near the end
                startPage = Math.Max(1, endPage - maxVisiblePages + 1);

                // Show first page if not in range
                if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link rounded-pill shadow-sm" href="@Url.Action("Index", new {
                            pageNumber = 1,
                            pageSize = Model.PageSize,
                            categoryId = Model.CategoryId,
                            searchTerm = Model.SearchTerm,
                            sortBy = Model.SortBy,
                            ascending = Model.Ascending
                        })">1</a>
                    </li>

                    // Show ellipsis if not directly after first page
                    if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link border-0 bg-transparent">...</span>
                        </li>
                    }
                }

                // Show page numbers
                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link rounded-pill shadow-sm" href="@Url.Action("Index", new {
                            pageNumber = i,
                            pageSize = Model.PageSize,
                            categoryId = Model.CategoryId,
                            searchTerm = Model.SearchTerm,
                            sortBy = Model.SortBy,
                            ascending = Model.Ascending
                        })">@i</a>
                    </li>
                }

                // Show last page if not in range
                if (endPage < Model.TotalPages)
                {
                    // Show ellipsis if not directly before last page
                    if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link border-0 bg-transparent">...</span>
                        </li>
                    }

                    <li class="page-item">
                        <a class="page-link rounded-pill shadow-sm" href="@Url.Action("Index", new {
                            pageNumber = Model.TotalPages,
                            pageSize = Model.PageSize,
                            categoryId = Model.CategoryId,
                            searchTerm = Model.SearchTerm,
                            sortBy = Model.SortBy,
                            ascending = Model.Ascending
                        })">@Model.TotalPages</a>
                    </li>
                }
            }

            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link rounded-pill shadow-sm" href="@Url.Action("Index", new {
                    pageNumber = Model.CurrentPage + 1,
                    pageSize = Model.PageSize,
                    categoryId = Model.CategoryId,
                    searchTerm = Model.SearchTerm,
                    sortBy = Model.SortBy,
                    ascending = Model.Ascending
                })" aria-label="Next">
                    <i class="bi bi-chevron-right"></i>
                </a>
            </li>
        </ul>
    </nav>
}

<script>
    
    $(document).ready(function() {
        // Fade in all cards with a slight delay between each
        $('.product-card').each(function(index) {
            $(this).css('opacity', '0').delay(index * 100).animate({
                opacity: 1
            }, 500);
        });

        // Hover effect using jQuery instead of CSS
        $('.product-card').hover(
            function() {
                $(this).addClass('shadow-lg').css({
                    'transform': 'translateY(-10px)',
                    'transition': 'transform 0.3s ease, box-shadow 0.3s ease'
                });
                $(this).find('.product-image').css({
                    'transform': 'scale(1.05)',
                    'transition': 'transform 0.3s ease'
                });
                $(this).find('.overlay-actions').slideDown(200);
            },
            function() {
                $(this).removeClass('shadow-lg').css({
                    'transform': 'translateY(0)',
                    'transition': 'transform 0.3s ease, box-shadow 0.3s ease'
                });
                $(this).find('.product-image').css({
                    'transform': 'scale(1)',
                    'transition': 'transform 0.3s ease'
                });
                $(this).find('.overlay-actions').slideUp(200);
            }
        );

        // Make entire card clickable
        $('.product-card').click(function() {
            var url = $(this).find('a').attr('href');
            if (url) {
                window.location = url;
            }
        });

        // Initialize any Bootstrap tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>


<style>
    .product-card {
        border-radius: 0.75rem;
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .product-image {
        height: 200px;
        object-fit: contain;
        padding: 1rem;
        transition: transform 0.3s;
    }

    .overlay-actions {
        background: linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0) 100%);
        display: none;
    }

    .badge {
        font-size: 0.8rem;
    }
   
</style>
